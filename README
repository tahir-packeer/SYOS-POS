# SYOS - Synex Outlet Store System

## Overview

SYOS (Synex Outlet Store System) is a comprehensive retail management system built with Java, implementing clean coding principles, design patterns, and MVC architecture. The system manages billing, inventory, stock, and reporting for both in-store and online transactions.

## Features

### Core Functionality
- **Automated Billing System**: Process both in-store and online transactions
- **Inventory Management**: Separate tracking for shelf stock and website inventory
- **Stock Management**: FIFO-based stock rotation with expiry date consideration
- **Comprehensive Reporting**: Sales, stock, reorder, and bill history reports
- **User Authentication**: Role-based access control (Admin, Manager, Cashier, Customer)

### Business Rules
- Items are stocked using FIFO with expiry date priority
- Automatic stock reduction after sales
- Reorder alerts when stock falls below threshold (configurable)
- Separate inventory tracking for in-store and online sales
- Running bill serial numbers starting from 1

## Architecture

### Design Patterns Used
1. **Singleton Pattern**: Configuration management and database connection pool
2. **Factory Pattern**: Database connection factory
3. **MVC Pattern**: Clear separation of Model, View, and Controller
4. **DAO Pattern**: Data access abstraction
5. **Dependency Injection**: Manual DI for loose coupling

### Layer Architecture
```
┌─────────────────────────────────────────┐
│                 View Layer              │
│            (Console Interface)          │
├─────────────────────────────────────────┤
│              Controller Layer           │
│        (Business Logic Coordination)    │
├─────────────────────────────────────────┤
│               Service Layer             │
│           (Business Logic)              │
├─────────────────────────────────────────┤
│                DAO Layer                │
│            (Data Access)                │
├─────────────────────────────────────────┤
│               Model Layer               │
│            (Domain Entities)            │
├─────────────────────────────────────────┤
│              Database Layer             │
│               (MySQL)                   │
└─────────────────────────────────────────┘
```

## Project Structure

```
src/
├── main/
│   ├── java/org/example/
│   │   ├── Main.java                     # Application entry point
│   │   ├── config/                       # Configuration management
│   │   │   ├── ConfigManager.java        # Singleton config manager
│   │   │   └── DatabaseConnectionFactory.java
│   │   ├── controller/                   # Controller layer
│   │   │   ├── AuthenticationController.java
│   │   │   ├── BillingController.java
│   │   │   ├── ItemController.java
│   │   │   ├── ReportController.java
│   │   │   └── StockController.java
│   │   ├── dao/                         # Data Access Objects
│   │   │   ├── interfaces/              # DAO interfaces
│   │   │   └── impl/                    # DAO implementations
│   │   ├── model/                       # Domain models
│   │   │   ├── Bill.java
│   │   │   ├── BillItem.java
│   │   │   ├── Customer.java
│   │   │   ├── Item.java
│   │   │   ├── StockBatch.java
│   │   │   ├── ShelfStock.java
│   │   │   ├── User.java
│   │   │   └── WebsiteInventory.java
│   │   ├── service/                     # Business logic services
│   │   │   ├── AuthenticationService.java
│   │   │   ├── BillingService.java
│   │   │   ├── ReportService.java
│   │   │   └── StockService.java
│   │   ├── util/                        # Utility classes
│   │   │   ├── PasswordUtils.java
│   │   │   └── ValidationUtils.java
│   │   └── view/                        # View layer
│   │       ├── MainView.java
│   │       ├── CashierView.java
│   │       ├── ManagerView.java
│   │       └── AdminView.java
│   └── resources/
│       ├── application.properties        # Configuration properties
│       └── logback.xml                   # Logging configuration
└── test/                                # Unit tests
    └── java/org/example/
        ├── service/
        ├── model/
        └── util/
```

## Database Schema

### Tables
- **users**: System users with role-based access
- **customers**: Customer information
- **items**: Product catalog
- **stock_batches**: Warehouse stock batches
- **shelf_stock**: In-store shelf inventory
- **website_inventory**: Online store inventory
- **bills**: Transaction records
- **bill_items**: Bill line items

### Key Relationships
- Bills → Customers (Many-to-One)
- Bills → Bill Items (One-to-Many)
- Stock Batches → Items (Many-to-One)
- Shelf Stock → Items (One-to-One)
- Website Inventory → Items (One-to-One)

## Setup Instructions

### Prerequisites
- Java 19 or higher
- MySQL 8.0 or higher
- Maven 3.8 or higher

### Installation Steps

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd syos_new
   ```

2. **Database Setup**
   ```bash
   # Create database and run schema
   mysql -u root -p < database/schema.sql
   ```

3. **Configuration**
   - Update `src/main/resources/application.properties`
   - Set your MySQL credentials:
     ```properties
     db.username=your_username
     db.password=your_password
     ```

4. **Build and Run**
   ```bash
   # Build the project
   mvn clean compile

   # Run tests
   mvn test

   # Run the application
   mvn exec:java -Dexec.mainClass="org.example.Main"
   ```

## Usage

### Default Users
- **Admin**: username=`admin`, password=`admin123`
- **Manager**: username=`manager1`, password=`secret456`
- **Cashier**: username=`cashier1`, password=`password789`

### User Roles and Permissions

| Feature | Cashier | Manager | Admin |
|---------|---------|---------|-------|
| Process Sales | ✓ | ✓ | ✓ |
| Stock Management | ✗ | ✓ | ✓ |
| Item Management | ✗ | ✓ | ✓ |
| Reports | ✗ | ✓ | ✓ |
| User Management | ✗ | ✗ | ✓ |

### Sample Operations

1. **Process a Sale**
   - Login as cashier
   - Choose "Process In-Store Sale"
   - Enter customer details
   - Add items by code and quantity
   - Complete payment

2. **Receive New Stock**
   - Login as manager
   - Go to Stock Management → Receive New Stock
   - Enter item details and batch information

3. **Generate Reports**
   - Login as manager
   - Go to Reports
   - Choose desired report type

## Clean Code Principles Applied

### SOLID Principles
- **Single Responsibility**: Each class has one clear responsibility
- **Open/Closed**: Services are open for extension, closed for modification
- **Liskov Substitution**: DAO implementations are substitutable
- **Interface Segregation**: Focused, role-specific interfaces
- **Dependency Inversion**: High-level modules depend on abstractions

### Additional Clean Code Practices
- Meaningful naming conventions
- Small, focused methods
- Proper exception handling
- Comprehensive logging
- Input validation and sanitization
- Proper separation of concerns

## Testing

### Running Tests
```bash
# Run all tests
mvn test

# Run specific test class
mvn test -Dtest=BillingServiceTest

# Generate test reports
mvn surefire-report:report
```

### Test Coverage
- Unit tests for service layer
- Model validation tests
- Utility function tests
- Mock-based testing with Mockito

## Future Enhancements (Assignment 2 Preparation)

### Concurrency Features Ready for Implementation
1. **Database Connection Pool**: HikariCP configured for concurrent access
2. **Thread-Safe Components**: Singleton patterns implemented safely
3. **Service Layer**: Stateless services ready for multi-threading
4. **Transaction Management**: Database transactions properly handled

### Planned GUI Features
- JavaFX-based user interface
- Real-time inventory updates
- Dashboard with charts and metrics
- Multi-window support for concurrent operations

### Web API Preparation
- Service layer can be easily exposed as REST APIs
- JSON serialization support (Jackson configured)
- Stateless authentication ready for JWT tokens

## Configuration

### Application Properties
```properties
# Database Configuration
db.url=jdbc:mysql://localhost:3306/syos
db.username=root
db.password=9900@tahir

# Business Rules
business.reorder.threshold=50
business.discount.rate=0.0

# Connection Pool (for concurrency)
db.pool.maximumPoolSize=10
db.pool.minimumIdle=2
```

## Logging

The application uses SLF4J with Logback for logging:
- Console output for development
- File logging to `logs/syos.log`
- Configurable log levels
- Structured logging for monitoring

## Contributing

1. Follow the established architecture patterns
2. Write unit tests for new features
3. Use proper logging for debugging
4. Follow clean code principles
5. Update documentation for new features

## License

This project is developed for educational purposes as part of the Clean Coding and Concurrent Programming (CCCP) assignment.

---

